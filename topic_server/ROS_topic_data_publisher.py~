#!/usr/bin/env python3

import rospy
import rosnode
import time
import json
from necst.msg import String_list_msg
from std_msgs.msg import Float64
from std_msgs.msg import Int64
from std_msgs.msg import Float32
from std_msgs.msg import Int32
from necst.msg import topic_record_msg
from necst.msg import String_list_msg


rospy.init_node("topic_publisher")

data_dict = {}
name_list = []
frame_list = []

def create_list():
    global name_list
    tmp_name = []
    pub_name = rospy.get_published_topics()
    for name, frame in pub_name:
        if name in name_list:
            continue
        name = name.split("/")[1]        
        if not "XFFTS" in name and not "tp_" in name:
            #try
            if frame == "std_msgs/Float64":
                data_dict[name] = None
                rospy.Subscriber(name, Float64, _record, callback_args = name)
                print("regist")
            elif frame == "std_msgs/Int64":
                data_dict[name] = None
                rospy.Subscriber(name, Int64, _record, callback_args = name)
                print("regist")                
            elif frame == "std_msgs/Float32":
                data_dict[name] = None
                rospy.Subscriber(name, Float32, _record, callback_args = name)
                print("regist")                
            elif frame == "std_msgs/Int32":
                data_dict[name] = None
                rospy.Subscriber(name, Int32, _record, callback_args = name)
                print("regist")                
            else:
                #print("############### not defined ")
                #print(frame)
                pass
            tmp_name.append("/"+name)
    name_list.extend(tmp_name)
    return

def _record(req, arg):
    global data_dict
    data_dict[arg] = req.data
    return

pub = rospy.Publisher("topic_record",topic_record_msg, queue_size=1)
create_list()
time.sleep(3.)
while not rospy.is_shutdown():
    create_list()
    time.sleep(0.001)
    #for key in data_dict.keys():
    pub_dict = {}
    for key, value in sorted(data_dict.items()):
        pub_dict[key] = value
    bb = json.dumps(pub_dict)
    pub.publish(name=bb)
    time.sleep(0.5)

